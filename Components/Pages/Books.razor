@page "/books"
@inject NavigationManager NavigationManager

<header class="d-flex justify-content-between my-4">
    <h1>Book Management</h1>
    <div class="m-x-0">
        <NavLink class="btn btn-primary" href="addbook">Add new book</NavLink>
    </div>
</header>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>Quantity</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Book book in books)
        {
            <tr>
                <td>@book.BookId</td>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Genre</td>
                <td>@book.Quantity</td>
                <td class="text-center">
                    <button class="btn btn-primary" @onclick="() => EditBook(book)">Edit</button>
                    <button class="btn btn-primary" @onclick="() => DeleteBook(book)">Delete</button>
                </td>
            </tr>
        } 
    </tbody>
</table>


@code {
    List<Book> books = DatabaseManager.GetAllBooks().OrderBy(book => book.BookId.Length).ThenBy(book => book.BookId).ToList();
    private void EditBook(Book book)
    {
        NavigationManager.NavigateTo($"/editbook/{book.BookId}");
    }

    private void DeleteBook(Book book)
    {
        /// Add code for confirming the deletion
        // bool confirmDelete = await App.Current.Books.DisplayAlert("Confirm Delete", 
        // "Are you sure you want to delete this book?", 
        // "Yes", 
        // "No");
        books.Remove(book);
        DatabaseManager.DeleteBook(book.BookId);
    }
}
