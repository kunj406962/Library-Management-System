@page "/addbook"
<div class="container-fluid py-4">
	<div class="card shadow-sm">
		<div class="card-header bg-light d-flex justify-content-between align-items-center">
			<h2 class="mb-0"><i class="bi bi-book me-2"></i>Add A New Book to the Library</h2>
			<NavLink class="btn btn-outline-secondary" href="/books">
				<i class="bi bi-arrow-left me-1"></i>Back to Books
			</NavLink>
		</div>

		<div class="card-body">
			<div class="row justify-content-center">
				<div class="col-md-8 col-lg-6">
					<form>
						<div class="mb-3">
							<label class="form-label fw-bold">Book Title</label>
							<input type="text" class="form-control" placeholder="Enter Title" @bind="title"/>
						</div>

						<div class="mb-3">
							<label class="form-label fw-bold">Author</label>
							<input type="text" class="form-control" placeholder="Enter Author" @bind="author" />
						</div>

						<div class="mb-3">
							<label class="form-label fw-bold">Genre</label>
							<input type="text" class="form-control" placeholder="Enter Genre" @bind="genre" />
						</div>

						<div class="mb-4">
							<label class="form-label fw-bold">Quantity</label>
							<input type="text" class="form-control" placeholder="Enter Quantity (must be number)" @bind="quantity">
						</div>

						<div class="d-grid gap-2 d-md-flex justify-content-md-end">
							<button type="submit" class="btn btn-primary" @onclick="CreateBook">
								<i class="bi bi-plus-circle me-1"></i>Create Book
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>



@code{
	// used to navigate back to the Home page
	[Inject] NavigationManager NavigationManager { get; set; }
	private string title;
	private string author;
	private string genre;
	public string quantity;
	private Book book;

	/// <summary>
	/// Checks idf quantity entered is a positive number
	/// </summary>
	/// <returns></returns>
	/// <exception cref="Exception">Checks if the integer input is positive and whole</exception>
	private int CheckQuantity()
	{
		int intQuantity;
		if(Int32.TryParse(quantity, out intQuantity))
		{
			if (intQuantity >= 0)
			{
				return intQuantity;
			}
			else
			{
				throw new Exception("Quantity must be a positive integer");
			}
		}
		else
		{
			throw new Exception("Quantity must be a whole number");
		}

	}

	/// <summary>
	/// Creates a book if no exceptions and sets a success alert or Error alert if it fails
	/// </summary>
	/// <returns></returns>
	private async Task CreateBook()
	{
		try
		{
			BookManager.CreateBook(title, author, genre, CheckQuantity());
			title = null;
			author = null;
			genre = null;
			quantity = null;
			await App.Current.MainPage.DisplayAlert($"Success", $"Book Added to System", "OK");
			NavigationManager.NavigateTo("/books");
		}
		catch(Exception ex)
		{
			await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
		}
	}
}