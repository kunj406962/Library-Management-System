@page "/returnbook"
@using CPRG211FinalProject.Classes

<h4 class="my-2">Return Book</h4>

<div class="d-flex flex-nowrap  gap-4">

    <div class="w-25">
        <label>Customer ID:</label>
        <input class="form-control" type="text" placeholder="Any" @bind="customerID" />
    </div>

    <div class="w-25">
        <label></label>
        <button class="btn btn-primary w-100" @onclick="() => SearchBorrows(customerID)">Find Data</button>
    </div>

</div>

<div class="flights-found-field">
    <h4 class="mt-5 mb-2">Items</h4>
    @if (borrowsFound.Count == 0)
    {
        <select class="formatted-field form-control" @bind="selectedBorrowId">
            <option value="" selected disabled>No Books To Be Returned </option>
        </select>
    }
    else
    {
        <select class="formatted-field form-control" @bind="selectedBorrowId">
            <option value="" selected disabled>Please select items...</option>
            @foreach (BorrowBooks b in borrowsFound)
            {
                <option value=@b.BorrowId>@DatabaseManager.GetBook(b.BookId).Title</option>
            }
        </select>
        if (!String.IsNullOrEmpty(selectedBorrowId))
        {
            OnChange();
        }
    }
</div>


<h4 class="mt-5 mb-0">View Data</h4>
<div class="reservation-container">
    <div class="form-group">
        <label>Borrow ID:</label>
        <input type="text" class="form-control" placeholder="BorrowID" @bind="SelectedBorrow.BorrowId"  readonly>
    </div>

    <div class="form-group">
        <label>Customer Name:</label>
        <input type="text" class="form-control" placeholder="CustomerName" @bind="name" readonly>
    </div>

    <div class="form-group">
        <label>Book ID:</label>
        <input type="text" class="form-control" placeholder="BookID" @bind="SelectedBorrow.BookId" readonly>
    </div>

    <div class="form-group">
        <label>Book Name:</label>
        <input type="text" class="form-control" placeholder="Book Name" @* @bind="SelectedBorrow.BookId" *@ readonly>
    </div>

    <div class="form-group">
        <label>Quantity Borrowed:</label>
        <input type="text" class="form-control" placeholder="Quantity Borrowed" @bind="SelectedBorrow.Quantity" readonly>
    </div>

    <div class="form-group">
        <button class="btn btn-outline-secondary" type="button" @* @onclick="ReturnAll" *@>Return All</button>
    </div>
</div>



@code {
    //navigates back to books page after returning books
    [Inject] NavigationManager NavigationManager { get; set; }
    string customerID = "";
    string selectedBorrowId = "";
    string name = "";
    string title = "";
    List<BorrowBooks> borrowsFound = new List<BorrowBooks>();
    BorrowBooks SelectedBorrow = new BorrowBooks();
    List<string> itemsFound = new List<string>();
    private string quantity;

    private void OnChange()
    {
        SelectedBorrow = DatabaseManager.GetBorrow(selectedBorrowId);  

        if (SelectedBorrow != null)
        {
            var customer = DatabaseManager.GetCustomer(SelectedBorrow.CustomerId);
            name = customer.FirstName + " " + customer.LastName;
        }
    }
    /// <summary>
    /// searches the database for books borrowed depending on customer
    /// </summary>
    /// <param name="customerID">Uses customer Id for returned books</param>
    private void SearchBorrows(string customerID)
    {
        borrowsFound = BorrowManager.BooksNotReturned(customerID); 
    }
    

    /// <summary>
    /// Updates the value of the selected borrowed book quntity
    /// If selected returned quantity is equal to the amount they borrowed
    /// then the status of returned turns to NO
    /// </summary>
    /// <returns></returns>
    private async Task Return()
    {
        try
        {
            // updates the value of the borrow quantity
            // checks for quantity to see if status can be changed to returned
            DatabaseManager.UpdateBorrow(SelectedBorrow);

            // display alert for update success
            await App.Current.MainPage.DisplayAlert($"Success", $"Your book has been returned", "OK");

            // navigate to the books page
            NavigationManager.NavigateTo("/books");
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
        }
    }
    /// <summary>
    /// Returns all quantity amount to 0
    /// and updates the returned status to "YES"
    /// Alternative to inputting a selected amount of books you want to return
    /// </summary>
    /// <returns>Updates Database for quantity and status for selected customer</returns>
    private async Task ReturnAll()
    {
        try
        {
            // updates the value of the boroow quantity
            // checks for quantity to see if status can be changed to returned
            // book.Quantity = Convert.ToInt32(quantity);
            SelectedBorrow.Returned = "YES";
            DatabaseManager.UpdateBorrow(SelectedBorrow);

            // display alert for update success
            await App.Current.MainPage.DisplayAlert($"Success", $"Your books have been returned", "OK");

            // navigate to the books page
            NavigationManager.NavigateTo("/books");
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
        }
    }
  
}