@page "/returnbook"
@using CPRG211FinalProject.Classes

<div class="container-fluid py-4">
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h4 class="mb-0">Return Books</h4>
        </div>
        <div class="card-body">
            <!-- Search Section -->
            <div class="row g-3 align-items-end mb-4">
                <div class="col-md-4">
                    <label class="form-label">Customer ID:</label>
                    <input class="form-control" type="text" placeholder="Enter customer ID" @bind="customerID" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-primary w-100" @onclick="SearchBorrows">
                        <i class="bi bi-search me-1"></i> Find Data
                    </button>
                </div>
            </div>

            <!-- Items Selection -->
            <div class="mb-4">
                <h5 class="mb-3">Borrowed Items</h5>
                @if (borrowsFound.Count == 0)
                {
                    <div class="alert alert-info">Loading borrowed items...</div>
                }
                else
                {
                    <select class="form-select" @bind="selectedBorrowId">
                        <option value="" selected disabled>Please select a borrowed item...</option>
                        @foreach (BorrowBooks b in borrowsFound)
                        {
                            <option value="@b.BorrowId">@DatabaseManager.GetBook(b.BookId).Title</option>
                        }
                    </select>
                    @if (!String.IsNullOrEmpty(selectedBorrowId))
                    {
                        OnChange();
                    }
                }
            </div>

            <!-- Details Section -->
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Borrow Details</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Borrow ID:</label>
                            <input type="text" class="form-control" placeholder="BorrowID" @bind="SelectedBorrow.BorrowId" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Customer Name:</label>
                            <input type="text" class="form-control" placeholder="CustomerName" @bind="name" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Book ID:</label>
                            <input type="text" class="form-control" placeholder="BookID" @bind="SelectedBorrow.BookId" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Book Name:</label>
                            <input type="text" class="form-control" placeholder="Book Name" @bind="title" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Quantity Borrowed:</label>
                            <input type="text" class="form-control" placeholder="Quantity Borrowed" @bind="SelectedBorrow.Quantity" readonly>
                        </div>
                        <div class="col-12 mt-3">
                            <button class="btn btn-danger" type="button" @onclick="Return">
                                <i class="bi bi-arrow-return-left me-1"></i> Return Book
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    //navigates back to books page after returning books
    [Inject] NavigationManager NavigationManager { get; set; }
    string customerID = "";
    string selectedBorrowId = "";
    string name = "";
    string title = "";
    List<BorrowBooks> borrowsFound = new List<BorrowBooks>();
    BorrowBooks SelectedBorrow = new BorrowBooks();
    Book book;
    List<string> itemsFound = new List<string>();
    private string quantity;

    private void OnChange()
    {
        SelectedBorrow = DatabaseManager.GetBorrow(selectedBorrowId);
        book = DatabaseManager.GetBook(SelectedBorrow.BookId);
        title = book.Title;

        if (SelectedBorrow != null)
        {
            var customer = DatabaseManager.GetCustomer(SelectedBorrow.CustomerId);
            name = customer.FirstName + " " + customer.LastName;
        }
    }

    /// <summary>
    /// searches the database for books borrowed depending on customer
    /// </summary>
    /// <param name="customerID">Uses customer Id for returned books</param>
    private async Task SearchBorrows()
    {
        Customer customer = null;
        customer = DatabaseManager.GetCustomer(customerID);
        if (String.IsNullOrEmpty(customer.CustomerID))
        {
            await App.Current.MainPage.DisplayAlert($"Important", $"Customer Id does not Exist", "OK");
        }
        else
        {
            borrowsFound = BorrowManager.BooksNotReturned(customerID);
            if (borrowsFound.Count == 0)
            {
                customerID = null;
                await App.Current.MainPage.DisplayAlert($"Important", $"Customer has no returnable books", "OK");
            }
        }
    }


    /// <summary>
    /// Updates the value of the selected borrowed book quntity
    /// If selected returned quantity is equal to the amount they borrowed
    /// then the status of returned turns to NO
    /// </summary>
    /// <returns></returns>
    private async Task Return()
    {
        try
        {
            //Changed Status to Yes
            SelectedBorrow.Returned = "YES";
            book.Quantity += SelectedBorrow.Quantity;

            DatabaseManager.UpdateBook(book);

            // updates the value of the borrow quantity
            DatabaseManager.UpdateBorrow(SelectedBorrow);

            // display alert for update success
            await App.Current.MainPage.DisplayAlert($"Success", $"Your book has been returned", "OK");
            customerID = "";
            selectedBorrowId = "";
            name = "";
            title = "";

            // navigate to the books page
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
        }
    }
  
}