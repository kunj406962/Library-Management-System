@page "/bookborrowing"
@using CPRG211FinalProject.Classes

<div class="container-fluid py-4">
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h4 class="mb-0">Borrow Book</h4>
        </div>
        <div class="card-body">
            <div class="row g-3 align-items-end mb-4">
                <div class="col-md-4">
                    <h5 class="mb-3">Select Customer</h5>
                    @if (customerList.Count == 0)
                    {
                            <div class="alert alert-info">Loading Customers...</div>
                    }
                    else
                    {
                            <div class="mb-4">
                                <select class="form-select" @bind="selectedCustomerID" >
                                    <option value="" selected disabled>Please select a customer...</option>
                                @foreach (Customer customer in customerList)
                                {
                                    <option value = "@customer.CustomerID">@DatabaseManager.GetCustomer(customer.CustomerID).ToString() </option>
                                }
                                </select>
                            @if (!String.IsNullOrEmpty(selectedCustomerID))
                            {
                                OnChangeCustomer();
                            }
                            </div>
                    }
                </div>
            </div>

            <h5 class="mb-3">Choose a Book to Borrow</h5>
            @if (bookList.Count == 0)
            {
                    <div class="alert alert-info">Loading books...</div>
            }
            else
            {
                    <div class="mb-4">
                        <select class="form-select" @bind="selectedBookID" >
                            <option value="" selected disabled>Please select a book...</option>
                        @foreach (Book book in bookList)
                        {
                            <option value="@book.BookId">@DatabaseManager.GetBook(book.BookId).Title</option>
                        }
                        </select>
                    @if (!String.IsNullOrEmpty(selectedBookID))
                    {
                        OnChange();
                    }
                    </div>
            }

            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Borrowing Details</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Customer ID</label>
                            <input type="text" class="form-control" placeholder="Customer ID" @bind="selectedCustomerID" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Customer Name</label>
                            <input type="text" class="form-control" placeholder="Customer Name" @bind="selectedCustomerName" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Book ID</label>
                            <input type="text" class="form-control" placeholder="Book ID" @bind="selectedBookID" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Author</label>
                            <input type="text" class="form-control" placeholder="Author Name" @bind="author" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Genre</label>
                            <input type="text" class="form-control" placeholder="Genre" @bind="genre" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Available Quantity</label>
                            <input type="text" class="form-control" placeholder="Available Quantity" @bind="availableQuantity" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Quantity to Borrow</label>
                            <input type="text" class="form-control" placeholder="Borrow Quantity" @bind="borrowQuantity">
                        </div>
                        <div class="col-12 mt-3">
                            <button class="btn btn-primary" type="button" @onclick="Borrow">
                                <i class="bi bi-book me-1"></i> Borrow Book
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Intialize variables to be used
    [Inject] NavigationManager NavigationManager { get; set; }
    string selectedCustomerID; // for getting the customer for the dropdown in book borrowing
    string selectedBookID; // for getting the books and showing in the dropdwon
    string selectedCustomerName;
    string author;
    string genre;
    int availableQuantity;
    string borrowQuantity;

    public Book borrowBook;
    List<Book> bookList = BookManager.Books; // get the list of books to display to the user so they can borrow
    BorrowBooks bookForBorrowing = new BorrowBooks();
    Customer borrowCustomer;

    List<Customer> customerList = DatabaseManager.GetAllCustomers().OrderBy(customer => customer.CustomerID.Length).ThenBy(customer => customer.CustomerID).ToList(); // get the list of customers to display when borrowing the book

    /// <summary>
    /// Instantiating the customer to access attributes
    /// </summary>
    private void OnChangeCustomer()
    {
        borrowCustomer = DatabaseManager.GetCustomer(selectedCustomerID);
        selectedCustomerID = borrowCustomer.CustomerID;
        selectedCustomerName = $"{borrowCustomer.FirstName} {borrowCustomer.LastName}";
    }

    /// <summary>
    /// Instantiating the book to access its attributes
    /// </summary>
    private void OnChange()
    {
        borrowBook = DatabaseManager.GetBook(selectedBookID);
        author = borrowBook.Author;
        genre = borrowBook.Genre;
        availableQuantity = borrowBook.Quantity;
    }

    private int CheckQuantity()
    {
        int intQuantity;
        if (Int32.TryParse(borrowQuantity, out intQuantity))
        {
            if (intQuantity >= 0)
            {
                if (intQuantity > availableQuantity)
                {
                    throw new Exception($"Quantity must be less than or equal to available book count of {availableQuantity}");
                }
                else
                {
                    return intQuantity;
                }
            }
            else
            {
                throw new Exception("Quantity must be a positive integer");
            }
        }
        else
        {
            throw new Exception("Quantity must be a whole number");
        }

    }

    /// <summary>
    /// Checking the input for the customer id and bookID before calling the method of the button
    /// </summary>
    /// <exception cref="Exception"></exception>
    private void CheckID()
    {
        if (String.IsNullOrEmpty(selectedCustomerID))
        {
            throw new Exception("Enter Customer ID first!!");
        }
        else if (String.IsNullOrEmpty(selectedBookID))
        {
            throw new Exception("Choose A Book First!!");
        }
    }

    private async Task Borrow()
    {
        try
        {
            CheckID();
            BorrowManager.AddBorrow(selectedCustomerID, selectedBookID, CheckQuantity());
            selectedCustomerID = null;
            selectedCustomerName = null;
            selectedBookID = null;
            author = null;
            genre = null;
            availableQuantity = 0;
            borrowQuantity = null;

            await App.Current.MainPage.DisplayAlert($"Success", $"Book has been borrowed", "OK");
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
        }
    }

    // Hans Todo Notes
    // 1. Change textbox search to dropdown list - in progress
    // 2. add a filter list - not started 

}