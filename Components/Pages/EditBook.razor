@page "/editbook/{BookId}"

<div class="container-fluid py-4">
	<div class="card shadow-sm">
		<div class="card-header bg-light d-flex justify-content-between align-items-center">
			<h2 class="mb-0"><i class="bi bi-pencil-square me-2"></i>Edit Book: @book.BookId</h2>
			<NavLink class="btn btn-outline-secondary" href="/books">
				<i class="bi bi-arrow-left me-1"></i>Back to Books
			</NavLink>
		</div>

		<div class="card-body">
			<div class="row justify-content-center">
				<div class="col-md-8 col-lg-6">
					<form>
						<div class="mb-3">
							<label class="form-label fw-bold">Book Title</label>
							<input type="text" class="form-control" placeholder="Update Title" @bind="book.Title" />
						</div>

						<div class="mb-3">
							<label class="form-label fw-bold">Author</label>
							<input type="text" class="form-control" placeholder="Update Author" @bind="book.Author" />
						</div>

						<div class="mb-3">
							<label class="form-label fw-bold">Genre</label>
							<input type="text" class="form-control" placeholder="Update Genre" @bind="book.Genre" />
						</div>

						<div class="mb-4">
							<label class="form-label fw-bold">Quantity</label>
							<input type="text" class="form-control" placeholder="Update Quantity (must be number)" @bind="book.Quantity">
						</div>

						<div class="d-grid gap-2 d-md-flex justify-content-md-end">
							<button type="submit" class="btn btn-warning text-white" @onclick="UpdateBook">
								<i class="bi bi-save me-1"></i>Update Book Details
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>


@code {


	// used to navigate back to the Home page
	[Inject] NavigationManager NavigationManager { get; set; }
	private Book book = new Book();
	private string quantity;

	[Parameter]
	public string BookId { get; set; } // parameter for the book id


	/// <summary>
	/// Checks idf quantity entered is a positive number
	/// </summary>
	/// <returns></returns>
	/// <exception cref="Exception">Checks if the integer input is positive and whole</exception>

	private int CheckQuantity()
	{
		int intQuantity;
		if (Int32.TryParse(quantity, out intQuantity))
		{
			if (intQuantity >= 0)
			{
				return intQuantity;
			}
			else
			{
				throw new Exception("Quantity must be a positive integer");
			}
		}
		else
		{
			throw new Exception("Quantity must be a whole number");
		}

	}

	protected override void OnInitialized()
	{
		// Get the book from the database using the BookId
		// Uncomment once the GetBook method is implemented in the BookDbAccessor class
		book = DatabaseManager.GetBook(BookId);
		quantity = Convert.ToString(book.Quantity);
	}

	/// <summary>
	/// Updates the book values based on the inputs from the user
	/// </summary>
	/// <returns></returns>
	private async Task UpdateBook()
	{
		try
		{
			// update the values of the book
			// book.Title = title;
			// book.Author = author;
			// book.Genre = genre;
			// book.Quantity = Convert.ToInt32(quantity);
			book.Quantity = CheckQuantity();
			BookManager.UpdateBook(book);

			// display alert for update success
			await App.Current.MainPage.DisplayAlert($"Success", $"Book information has been updated", "OK");

			// navigate to the books page
			NavigationManager.NavigateTo("/books");
		}
		catch (Exception ex)
		{
			await App.Current.MainPage.DisplayAlert($"Error", $"{ex.Message}", "OK");
		}
	}

	
}
